/* Queries to select all documents in collections */

// Return all documents in museum_flat collection
db.museum_flat.find()
// Return all documents in museum_embed_byid collection
db.museum_embed_byid.find()
// Return all documents in museum_embed_bycity collection
db.museum_embed_bycity.find()
// Return all documents in museum_embed_bytype collection
db.museum_embed_bytype.find()



/* Query to show selection of embedded array data, based on selection criteria */

// Find all museums in Alabama state, which is embedded in location, which are of type Historic Preservation
db.museum_embed_byid.find({"location.state": "AL", "museumType":"HISTORIC PRESERVATION"}, {})
// Find all museums in the city of Carmel, which is embedded in _id, which are of type Historic Preservation, which is embedded in museums
db.museum_embed_bycity.find({"_id.city":"CARMEL", "museums.museumType":"HISTORIC PRESERVATION"})
// Find all documents containing museums of type General Museum, which is embedded in _id, and in the state of California, which is embedded in location, which is embedded in museums
db.museum_embed_bytype.find({"_id.MuseumType":"GENERAL MUSEUM", "museums.location.state": "CA"})



/* Queries to show selection showing projection */

// Find all museums in museum_flat, showing the museum name, type and city. Allowing the autogenerated Id to be shown as well
db.museum_flat.find({}, {museumName:1, museumType:1, "location.city":1})
// Find all museums in museum_embed_byid, hiding the autogenerated ID, displaying the museum id, state and phone number
db.museum_embed_byid.find({}, {_id:0, museumID:1, "location.state":1, phoneNumber:1})
// Find all museums in museum_embed_bycity, hiding the autogenerated ID, displaying the city and museum name
db.museum_embed_bycity.find({}, {_id:0, "_id:city":1, "museums.museumName":1})
// Find all museums in museum_embed_bytype, showing the id of museum type, as well as displaying the museum id and state
db.museum_embed_bytype.find({}, {"_id:MuseumType":1, "museums.museumID":1, "museums.location.state":1})



/* Queries to show selection with sorted output */

// Find all museums in museum_flat in California state, sorted by Museum name in ascending order
db.museum_flat.find({state:"CA"}).sort({museumName:1})
// Find all museums in museum_embed_byid, classififed as Art Museums, sorted by Zip Code in descending order
db.museum_embed_byid.find({museumType:"ART MUSEUM"}).sort({"location.zipCode":-1})
// Find all documents in museum_embed_bycity containing museums in Alabama state, sorted by Phone Number in ascending order
db.museum_embed_bycity.find({"museums.location.state":"AL"}).sort({"museums.phoneNumber":1})
// Find all museusm in museum_embed_bytype, sorted by Museum Type in ascending order
db.museum_embed_bytype.find({}).sort({"_id.MuseumType":1})



/* Queries to show aggregation */

// Find museums in museum_flat with Zip codes in the range: 36000 to 92500, displaying the State and Museum name
db.museum_flat.aggregate([{$match:{zipCode:{$gt:36000, $lt:92500}}}, {$project:{_id:0, zipCode:1, state:1, museumName:1}}])
// Find museums in New York in museum_embed_byid, which are of the type General Museum, displaying the Museum Name, ID and the city (to show only New York museums displayed)
// Uniwnd to display individual results, in this instance, no effect will be shown given that each museum is already listed separately
db.museum_embed_byid.aggregate([{$unwind:"$location"}, {$match:{"location.city": "NEW YORK", "museumType":"GENERAL MUSEUM"}}, {$project:{"_id":0, museumName:1, museumID:1, "location.city":"NEW YORK"}}])
// Find individual museums of Type; History, in the State of Washington, displaying the Museum Name, City and State
// Effect of unwind can be seen here, when searching for museums, individual museums will be returned instead of the City document they are a part of
db.museum_embed_bycity.aggregate([{$unwind:"$museums"}, {$match:{"museums.museumType":"HISTORY MUSEUM", "museums.location.state":"WA"}}, {$project:{"museums.museumName":1, "_id.city":1, "museums.location.state":1}}])
// Find individual museums of Type; Zoo, Aquarium, Wildlife, with Zip Codes bigger than 40000, displaying the museum ID and Zip Code and allowing the _id of Museum Type to be shown
// Effect of unwind also seen here to show individual museums instead of Museum Type document they are a part of
db.museum_embed_bytype.aggregate([{$unwind:"$museums"}, {$match:{"_id.MuseumType":"ZOO, AQUARIUM, OR WILDLIFE CONSERVATION", "museums.location.zipCode":{$gt:40000}}}, {$project:{"museums.museumID":1, "museums.location.zipCode":1}}])



/* Update collection */

/* Update individual document */
// Run query to show document to be updated
db.museum_flat.find({museumID:8400602298}, {_id:0, museumID:1, museumName:1})
// Run query to show nothing present when searching for ID that document will be updated to
db.museum_flat.find({museumID:1234567890}, {_id:0, museumID:1, museumName:1})
// Run update, changin the Museum ID
db.museum_flat.update({museumID:8400602298}, {$set:{museumID:1234567890}})
// Run query to show updated document
db.museum_flat.find({museumID:1234567890}, {_id:0, museumID:1, museumName:1})
// Run query to show nothing present when saerching for old ID
db.museum_flat.find({museumID:8400602298}, {_id:0, museumID:1, museumName:1})
// Reset data back to original ID
db.museum_flat.update({museumID:1234567890}, {$set:{museumID:8400602298}})

/* Update set of couments matching criteria */
// Run query to show documents to be updated
db.museum_embed_byid.find({"location.city": "NEW YORK"}, {})
// Run query to show no documents exist with updated information
db.museum_embed_byid.find({"location.city": "The Big Apple"}, {})
// Run update to change all documents listed with their city as New York to have the city set to The Big Apple
db.museum_embed_byid.updateMany({"location.city":"NEW YORK"}, {$set:{location: {city:"The Big Apple"}}})
// Run query to show documents with updated information
db.museum_embed_byid.find({"location.city": "The Big Apple"}, {})
// Run query to show no documents exist with old information
db.museum_embed_byid.find({"location.city": "NEW YORK"}, {})
// Reset dcouments back to original
db.museum_embed_byid.updateMany({"location.city":"The Big Apple"}, {$set:{location: {city:"NEW YORK"}}})
